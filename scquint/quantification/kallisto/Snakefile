import anndata
import numpy as np
import pandas as pd
from scipy.io import mmread

from scquint.utils import filter_min_cells_per_feature, filter_singletons, relabel


rule all:
    input:
        "adata.h5ad"


rule get_cdna_fasta:
    input:
        config["gtf_path"],
        config["genome_fasta_path"]
    output:
        "reference.fa"
    shell:
        "gffread -w {output} -g {input[1]} {input[0]}"


rule make_gene_transcript_info:
    input:
        config["gtf_path"]
    output:
        "gene_transcript_info.txt"
    run:
        df = pd.read_csv(
            input[0], '\t', header=None, comment="#",
            names=['chromosome', 'source', 'feature', 'start', 'end', 'score', 'strand', 'frame', 'attribute'],
        )
        df['gene_id'] = df.attribute.str.extract(r'gene_id "([^;]*)";')
        df['transcript_id'] = df.attribute.str.extract(r'transcript_id "([^;]*)";')
        gene_transcript_info = df[["gene_id", "transcript_id"]].drop_duplicates().dropna()
        gene_transcript_info.to_csv(output[0], "\t", index=False)


rule make_index:
    input:
        "reference.fa"
    output:
        "transcripts.idx"
    shell:
        "kallisto index -i {output} {input}"


rule quantify:
    input:
        "transcripts.idx",
        config["fastq_paths"]
    output:
        "matrix.abundance.mtx",
        "matrix.cells",
        "transcripts.txt",
    threads:
        workflow.cores
    shell:
        "kallisto pseudo --quant -i {input[0]} -o . -b {input[1]} -t {threads}"


rule make_adata:
    input:
        "matrix.abundance.mtx",
        "matrix.cells",
        "transcripts.txt",
        "gene_transcript_info.txt"
    output:
        "adata.h5ad"
    run:
        COOmatrix = mmread(input[0])
        CSRmatrix = COOmatrix.tocsr()
        sample_ids = pd.read_csv(input[1], header=None).values.ravel()
        obs = pd.DataFrame(index=sample_ids)
        cols = pd.read_csv(input[2], header=None, names=["transcript_id", "gene_id", "gene_name"], sep="\t")
        adata = anndata.AnnData(X=CSRmatrix, obs=obs, var=cols)
        gene_transcript_info = pd.read_csv(input[3], "\t", index_col=1)
        adata.var.loc[:, "gene_id"] = gene_transcript_info.loc[adata.var.transcript_id.values].gene_id.values
        adata.var["cluster"] = relabel(adata.var.gene_id.values)
        print(adata.shape)
        adata = filter_min_cells_per_feature(adata, config.get("min_cells_per_isoform", 30))
        print(adata.shape)
        adata = filter_singletons(adata)
        print(adata.shape)
        adata.var["original_cluster"] = adata.var.cluster
        adata.write(output[0])
